# SiteWhere Infrastructure
infra:
  profile: mongodb
  image:
    registry: docker.io
    pullPolicy: IfNotPresent
    imagePullSecrets: "-"
  zookeeper:
    enabled: true
    image: wurstmeister/zookeeper
    replicaCount: 1
    service:
      type: ClusterIP
      port: 2181
    zoonavigator:
      image: elkozmon/zoonavigator-web:latest
      service:
        type: LoadBalancer
        port: 8000
    api:
      image: elkozmon/zoonavigator-api:latest
  kafka:
    enabled: true
    image: wurstmeister/kafka:1.0.0
    replicaCount: 1
    service:
      type: ClusterIP
      inside:
        port: 9092
      outside:
        port: 9094
  jaeger:
    enabled: true
    image: jaegertracing/all-in-one
    replicaCount: 1
    service:
      type: ClusterIP
      ports:
        zipkin: "9411"
        ui: "16686"
  mongodb:
    enabled: true
    image: mongo:3
    replicaCount: 1
    service:
      type: ClusterIP
      port: 27017
  cassandra:
    enabled: false
    image: cassandra:3.11
    replicaCount: 1
    service:
      type: ClusterIP
      port: 9042
  influxdb:
    enabled: false
    image: influxdb:1.3-alpine
    replicaCount: 1
    service:
      type: ClusterIP
      port: 8086
  mosquitto:
    enabled: true
    image: eclipse-mosquitto:1.4.12
    replicaCount: 1
    service:
      type: LoadBalancer
      port: 1883
  coap:
    enabled: false
    service:
      type: LoadBalancer
      port: 5683

services:
  # profile: default|minimal
  profile: default
  debug: false
  image:
    registry: docker.io
    repository: sitewhere
    tag: 2.0.0
    pullPolicy: Never
    imagePullSecrets: "-"
  initContainers: true
  asset_management:
    enabled: true
    image: service-asset-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  device_management:
    enabled: true
    image: service-device-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  event_management:
    enabled: true
    image: service-event-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  event_sources:
    enabled: true
    image: service-event-sources
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  inbound_processing:
    enabled: true
    image: service-inbound-processing
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  instance_management:
    enabled: true
    image: service-instance-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  outbound_connectors:
    enabled: true
    image: service-outbound-connectors
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  tenant_management:
    enabled: true
    image: service-tenant-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  user_management:
    enabled: true
    image: service-user-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  web_rest:
    enabled: true
    image: service-web-rest
    replicaCount: 1
    service:
      grpc:
        type: ClusterIP
        api:
          port: 9000
        management:
          port: 9001
      http:
        type: LoadBalancer
        port: 8080
  batch_operations:
    enabled: false
    image: service-batch-operations
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  command_delivery:
    enabled: false
    image: service-command-delivery
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  device_registration:
    enabled: false
    image: service-device-registration
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  device_state:
    enabled: false
    image: service-device-state
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  event_search:
    enabled: false
    image: service-event-search
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  label_generation:
    enabled: false
    image: service-label-generation
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  rule_processing:
    enabled: false
    image: service-rule-processing
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  schedule_management:
    enabled: false
    image: service-schedule-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  streaming_media:
    enabled: false
    image: service-streaming-media
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001

clusterDomain: cluster.local

  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Setting up replication
## ref: https://github.com/bitnami/bitnami-docker-mongodb#setting-up-a-replication
#
replicaSet:
  enabled: false
  useHostnames: true

  ## Name of the replica set
  ##
  name: rs0

  ## Key used for replica set authentication
  ##
  # key: key

  ## Number of replicas per each node type
  ##
  replicas:
    secondary: 1
    arbiter: 1
  ## Pod Disruption Budget
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  pdb:
    minAvailable:
      primary: 1
      secondary: 1
      arbiter: 1

# Annotations to be added to MongoDB pods
podAnnotations: {}

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
# limits:
#   cpu: 500m
#   memory: 512Mi
# requests:
#   cpu: 100m
#   memory: 256Mi

## Node selector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

## Affinity
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Tolerations
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## If defined, storageClassName: [rook-ceph-block|hostpath]
  storageClass: rook-ceph-block
  accessModes:
    - ReadWriteOnce
  storage: 10Gi
  annotations: {}

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

